name: Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Construct the Docker image name
        id: set_name
        run: |
            DOCKER_IMAGE_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]'):test
            echo "DOCKER_IMAGE_NAME=$DOCKER_IMAGE_NAME" >> "$GITHUB_ENV"
      
      - name: Build Docker image
        run: |
          docker build -t $DOCKER_IMAGE_NAME --build-arg TARGETPLATFORM=$(uname -m) -f Dockerfile .
          echo "### Docker Build! :rocket:" >> $GITHUB_STEP_SUMMARY
        continue-on-error: false
        
      - name: List Docker Images
        run: docker images

      - name: Run Docker container
        run: |
          docker run -d -t -p 5000:5000 --name test_con $DOCKER_IMAGE_NAME 
          echo "To run on TPU, give permission like this: docker run -d -t -p 5000:5000 --privileged --user root -v /dev/bus/usb:/dev/bus/usb --name test_con $DOCKER_IMAGE_NAME"
        continue-on-error: false

      - name: Wait for container to start
        run: sleep 10
      - name: Logs of Docker run
        run: docker logs test_con 
      - name: Inspect Docker Container
        run: docker exec test_con tree /home/app
      - name: Test Docker container - Install Testing Dependencies
        run: |
          container_ip=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' test_con)
          echo "CONTAINER_IP=$container_ip" >> "$GITHUB_ENV"
          python tests/test_install_dependencies.py tests/test.py
          python -m pip install pytest
          python -m pip install coverage
        continue-on-error: false
      - name: Test Docker container - Run Test
        run: |
          coverage run -m pytest tests/test.py -v
          coverage report --fail-under=40
        continue-on-error: false

      - name: "Install Linter"
        run: python -m pip install pylint
      - name: "Run Linter Test"
        run: |
            SCORE_LINTER=$(pylint function/*.py --output-format=parseable | awk -F'[:=]' '/^Your code has been rated at/ { print int($2) }')
            echo "SCORE=$SCORE_LINTER" >> "$GITHUB_ENV"
            echo "Your code has been rated at $SCORE"
      - name: "Evaluate Linter Test Results"
        run: |
            PYLINT_THRESHOLD=0
            echo "Check if score ($SCORE) is not empty and is >= threshold ($PYLINT_THRESHOLD)"
            if [ -n "$SCORE" ] && [ "$SCORE" -ge "$PYLINT_THRESHOLD" ]; then
              echo "Pylint score is $SCORE, which is acceptable."
            else
              echo "Pylint score is $SCORE, which is below the threshold. Failing the job."
              exit 1
            fi
        continue-on-error: false

      - name: "Code Vulnerability: Install Bandit"
        run: python -m pip install bandit
      - name: "Code Vulnerability: Run Bandit"
        run: |
          echo "Check for issues with the sevierety of MEDIUM or higher and with the confidence of High"
          json_output=$(bandit -r -f json -ll -iii .)
          echo $json_output
          medium_issues=$(echo "$json_output" | python -c "import json, sys; data = json.load(sys.stdin); medium_issues = [issue for issue in data['results'] if issue['issue_severity'] == 'MEDIUM']; print(len(medium_issues))")
          high_issues=$(echo "$json_output" | python -c "import json, sys; data = json.load(sys.stdin); high_issues = [issue for issue in data['results'] if issue['issue_severity'] == 'HIGH']; print(len(high_issues))")
          echo "Medium Issues: $medium_issues"
          echo "High Issues: $high_issues"
          echo "MEDIUM_ISSUES=$medium_issues" >> "$GITHUB_ENV"
          echo "HIGH_ISSUES=$high_issues" >> "$GITHUB_ENV"
          
      - name: "Evaluate Code Vulnerability Results"
        run: |
          echo "The number of MEDIUM_ISSUES=$MEDIUM_ISSUES, and HIGH_ISSUES=$HIGH_ISSUES"
          if [ "$MEDIUM_ISSUES" -gt 1 ] || [ "$HIGH_ISSUES" -gt 1 ]; then
            echo
            echo "Stopping workflow due to issues"
            exit 1
          else
            echo "Code Vulnerability Check Success"
          fi

      

