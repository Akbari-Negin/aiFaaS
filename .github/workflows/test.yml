name: Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Construct the Docker image name
        id: set_name
        run: |
            DOCKER_IMAGE_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]'):test
            echo "DOCKER_IMAGE_NAME=$DOCKER_IMAGE_NAME" >> "$GITHUB_ENV"
      
      - name: Build Docker image
        run: |
          docker build -t $DOCKER_IMAGE_NAME --build-arg TARGETPLATFORM=$(uname -m) -f Dockerfile .
          echo "### Docker Build! :rocket:" >> $GITHUB_STEP_SUMMARY
        continue-on-error: false
        
      - name: List Docker Images
        run: docker images

      - name: Run Docker container
        run: |
          docker run -d -t -p 5000:5000 --name test $DOCKER_IMAGE_NAME 
          echo "To run on TPU, give permission like this: docker run -d -t -p 5000:5000 --privileged --user root -v /dev/bus/usb:/dev/bus/usb --name test_tpu $DOCKER_IMAGE_NAME"
        continue-on-error: false

      - name: Wait for container to start
        run: sleep 10
      - name: Logs of Docker run
        run: docker logs test  
      - name: Inspect Docker Container
        run: docker exec test tree /home/app
      - name: Test Docker container - Install Testing Dependencies
        run: |
          python tests/test_install_dependencies.py tests/test.py
          python -m pip install pytest
          python -m pip install coverage
        continue-on-error: false
      - name: Test Docker container - Run Test
        run: |
          coverage run -m pytest tests/test.py -v
          coverage report --fail-under=40
        continue-on-error: false

      - name: "Linter dependencies"
        run: python -m pip install pylint
      - name: "Linter Run"
        run: |
            SCORE=$(pylint function/*.py --output-format=parseable | awk -F'[:=]' '/^Your code has been rated at/ { print int($2) }')
            echo "Your code has been rated at $SCORE"
      - name: "Result evaluation"
        run: |
            PYLINT_THRESHOLD=1
            if [ "$SCORE" -ge "$PYLINT_THRESHOLD" ]; then
              echo "Pylint score is $SCORE, which is acceptable."
            else
              echo "Pylint score is $SCORE, which is below the threshold. Failing the job."
              exit 1
            fi

      

      

