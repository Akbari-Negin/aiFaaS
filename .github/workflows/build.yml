name: Docker Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set Docker image tag based on event
        run: |
            if [[ "${{ github.event_name }}" == "push" ]]; then
                TAG="push-${{ github.sha }}"
            elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
                TAG="pr-${{ github.event.pull_request.head.sha }}"
            else
                TAG="unknown"
            fi
            echo "Setting Docker image tag to $TAG"
            echo "::set-env name=DOCKER_TAG::$TAG"
        id: set_tag

      - name: Construct the Docker image name
        run: |
            IMAGE_NAME="${{ env.DOCKERHUB_USERNAME }}/${{ github.repository }}:${{ env.DOCKER_TAG }}"
            echo "Setting IMAGE_NAME to $IMAGE_NAME"
            echo "::set-env name=DOCKER_MAGE_NAME::IMAGE_NAME$"
            echo "Constructed Docker image name is $DOCKER_IMAGE_NAME"
        id: set_name

      - name: Build Docker image
        run: |
          docker build -t $DOCKER_IMAGE_NAME -f Dockerfile .
        working-directory: ${{ github.workspace }}

      - name: Run Docker container
        run: |
          docker run -d -t -p 5000:5000 $DOCKER_IMAGE_NAME --name test
          echo "To run on TPU, give permission like this: docker run -d -t -p 5000:5000 --privileged --user root -v /dev/bus/usb:/dev/bus/usb --name test_tpu $DOCKER_IMAGE_NAME"
        working-directory: ${{ github.workspace }}

      - name: Wait for container to start
        run: sleep 10

      - name: Test Docker container
        run: |
          python install_dependencies.py tests/test_install_dependencies.py
          python tests/test.py
        continue-on-error: false
        working-directory: ${{ github.workspace }}

      - name: Push Docker image to DockerHub
        if: success() 
        run: |
          # Construct the Docker image name using the specified format
          DOCKER_IMAGE_NAME="${{ env.DOCKERHUB_USERNAME }}/${{ github.repository }}:${{ env.DOCKER_TAG }}"
          echo "DOCKER_IMAGE_NAME= $DOCKER_IMAGE_NAME"
          docker login -u ${{ env.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
          docker push $DOCKER_IMAGE_NAME
        working-directory: ${{ github.workspace }}
